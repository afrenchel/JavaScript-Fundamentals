Array methods

//?Lectures//Array methods///

// //!Slice//returns a copy of the array only with the sliced parts//

// let arr = ['a', 'b', 'c', 'd', 'e'];
// console.log(arr.slice(2));
// console.log(arr.slice(2, 4)); //define the end parameter
// console.log(arr.slice(-2)); //getting the last 2 elemetns of the array
// console.log(arr.slice()); //creating a shallow copy- of the array the same as doing ([...arr]) with the spread operator;

// //!Splice//actually modifies the original array
// console.log(arr.splice(2));
// console.log(arr);

// arr.splice(-1); //delete the last element of the array

// //!Reverse//actually mutates the original array
// let arr = ['a', 'b', 'c', 'd', 'e'];

// const arr2 = ['j', 'k', 'l', 'g'];
// console.log(arr2.reverse());

// //!Concat//doesn't mutate the original array
// const letters = arr.concat(arr2);
// console.log(letters);
// //same thing//
// console.log(...arr, ...arr2);

// //!Join//

// console.log(letters.join('-')); //add a separator

//!AT//also works on strings

const arr = [23, 11, 64];
console.log(arr[0]);
console.log(arr.at(0)); //taking a value out of the array

console.log(arr[arr.length - 1]); //taking the last element;
console.log(arr.slice(-1)[0]); //copy of the array only with the last element;[0] take the actual value out

console.log(arr.at(-1)); //taking the last element of the array with the at method

//!For each////loop over the array and over each iteration will execute this function

//For of // can use continue and break
const movements = [200, 450, -400, 3000, -650, -130, 70, 1300];
for (const movement of movements.entries()) {
  if (movement > 0) {
    console.log(`You deposited ${movement}`);
  } else {
    console.log(`You withdrew ${Math.abs(movement)}`);
  }
}

//for each//continue and break don't work

movements.forEach(function (movement, index, array) {
  if (movement > 0) {
    console.log(`Movement ${index + 1}: You deposited ${movement}`);
  } else {
    console.log(` Movement ${index + 1}: You withdrew ${Math.abs(movement)}`);
  }
});

//0: function(200);
//1: function(450);
//2: function(-400);

//!For each for MAPS and SETS//

const currencies = new Map([
  ['USD', 'United States dollar'],
  ['EUR', 'Euro'],
  ['GBP', 'Pound sterling'],
]);

currencies.forEach(function (value, key, map) {
  console.log(`${key}: ${value}`);
});

const currenciesUnique = new Set(['USD', 'GBP', 'USD', 'EUR', 'EUR']);
console.log(currenciesUnique);

currenciesUnique.forEach(function (value, _, map) {
  console.log(`${key}: ${value}`);
});
//keep the same parameters but to avoid confusions beacuse we don't have key values in SETS we can use _
